initialize() {
	if (exists("slimgui")){
		defineConstant("NUM",1);
		defineConstant("PROB_MIG",0.1);
		defineConstant("K", 50);	// carrying capacity
		defineConstant("Npop",30);
		defineConstant("m",10);
		defineConstant("NTICKS",20000);
	}

	initializeSLiMModelType("nonWF");
	
	defineConstant("SEXRATIO",0.5);
	
	initializeSLiMOptions(nucleotideBased=T);	
	initializeSex();
	defineConstant("LENGTH",1e8);

	defineConstant("FOLDER","/mnt/primevo/work/timothe_dandoy/SLiM_Project/tmp/NWF_Vanilla/Migrations/NWFV_MigV2_subpop/");

	
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = T;
//	initializeMutationType("m2", 0.5, "f", 0.2);
	initializeGenomicElementType("g1", m1, 1.0,mmJukesCantor(m*1.25e-8 / 3));
//	initializeGenomicElementType("g2", c(m1,m2), c(10.0,1.0));
	
	initializeChromosome(1,LENGTH,type="A",symbol="A");
	initializeAncestralNucleotides(randomNucleotides(LENGTH));
	initializeGenomicElement(g1, 0, LENGTH-1);
	initializeRecombinationRate(m*1e-8);
	
	initializeChromosome(2,LENGTH,type="X",symbol="X");
	initializeAncestralNucleotides(randomNucleotides(LENGTH));
	initializeGenomicElement(g1, 0, LENGTH-1);
	initializeRecombinationRate(m*1e-8);
	
	initializeChromosome(3,LENGTH,type="Y",symbol="Y");
	initializeAncestralNucleotides(randomNucleotides(LENGTH));
	initializeGenomicElement(g1, 0, LENGTH-1);
	initializeRecombinationRate(0);
}

// each individual reproduces itself once
reproduction() {
	for (pop in sim.subpopulations){
		inds = pop.individuals;
		females = inds[inds.sex == "F"];
		males = inds[inds.sex == "M"];
		females = sample(females,size(females));
		males = sample(males,size(males));
		//each female reproduce with one male, each male can reproduce multiple times
		Nrepro = min(size(females),size(males));
		for (repro in 0:(Nrepro-1)){
			pop.addCrossed(females[repro], males[repro],sex=SEXRATIO);
		}
	}
	self.active = 0;
}

1 early() {
	for (i in 0:(Npop-1)){
		sim.addSubpop(i,K,SEXRATIO);
	}
	deleteFile(FOLDER+"NWF_subpop_star_Mig"+PROB_MIG+","+NUM+".txt");
}

early(){
	// Males migration
	inds = sim.subpopulations.individuals;
	males = inds[inds.sex == "M"];
	nMigrants = min(rpois(1,size(males)*PROB_MIG),size(males));
	migrants = sample(males,nMigrants);
	for (migrant in migrants){
		do dest = sample(sim.subpopulations, 1);
		while (dest == migrant.subpopulation);
		
		dest.takeMigrants(migrant);
	}
	// Carriying capacity removal 
	sim.subpopulations.fitnessScaling = K / sim.subpopulations.individualCount;
}

NTICKS late() {

	for (pop in sim.subpopulations){
		hapA = pop.haplosomesForChromosomes("A", includeNulls=F);
		hapX = pop.haplosomesForChromosomes("X", includeNulls=F);
   		hapY = pop.haplosomesForChromosomes("Y", includeNulls=F);

		PiA  = calcPi(hapA);
		PiX  = calcPi(hapX);
		PiY  = calcPi(hapY);
		
		writeFile(FOLDER+"NWF_subpop_star_Mig"+PROB_MIG+","+NUM+".txt", paste(c(PiA,PiX,PiY)),append=T);
	}
}
